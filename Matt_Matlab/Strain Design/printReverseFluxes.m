function printReverseFluxes(model,solution,map_flag)

% Using the model and solution from the reverseMethanogenesis.m code, print
% out the main fluxes to better visualize what's happening. If indicated,
% also create a flux map using the Paint4Net toolbox
%
% INPUT
% model: the M. maripaludis model, a COBRA Toolbox model structure. This
% function is intended to take in the model generated using the
% reverseMethanogenesis.m code
% solution: a flux distribution solution from running FBA on the M.
% maripaludis model that maximizes biomass yield. This function is intended
% to take in a solution generated by the reverseMethanogenesis.m code
%
% OPTIONAL INPUT
% map_flag: an optional boolean parameter indicating whether or not to
% create a Paint4Net flux map to visualize model fluxes. (Default = false)
% 
% Matthew Richards, 09/28/2015


% Check for map flag
if (nargin<3)
    map_flag = false;
end

%S pecify the reactions we want
rxns = {...
% Step 1: Methane -> Methyl-CoM
'rxn03127[c0]';...
% Step 2: Methyl-CoM -> Methanol
'rxn10568[c0]';...
% Step 3: CoM-S-S-CoB -> CoM
'HdrABC';...
% Step 4: Na+ Generator
'Eha/Ehb';...
% ATP Synthase
'ATPS'};

% Create Reaction Strings to store reaction shorthand
rxn_strings = {...
'Methane -> Methyl-CoM';...
'Methyl-CoM -> Methanol';...
'CoM-S-S-CoB -> CoM';...
'Ferredoxin Generator';...
'ATP Synthase'};
% Intersect those reactions with the model, but keep it in the order of rxns
[~,~,idxB] = intersect(rxns,model.rxns,'stable');

% Print out the reaction formulas
printRxnFormula(model,rxns);

% Use the index to pull out fluxes
fluxes = solution.x(idxB);

for i=1:length(rxns)
% Print it all out in pretty format
fprintf('\n%s(%s): %0.2f',rxn_strings{i},rxns{i},fluxes(i));
end
fprintf('\n\n')

if map_flag
    all_rxns = findMetSynPath(model,'Methanol[c0]',solution,{'biomass0'},0.1);
    drawRxnsMap(model,all_rxns,solution);
end